Group Members: 
Aditya Shah, netid: as3975
Rudra Patel, netid: rp1523

Test Plan:

Test mymalloc and myfree with various test cases (valid and invalid use cases).


Testing:
    -Allocating entire heap with mymalloc
    -Allocating multiple chunks of memory and ensuring each mymalloc call returns a valid pointer
    -Ensuring alignment is correctly taking place when allocating chunk sizes that are non-multiples of 8
    -Denying requests of allocating invalid sizes of memory (zero or negative size, excessive memory requests)
    -Coalescing by merging free adjacent chunks to allocate larger chunk sizes
    -myfree prints error message and terminates program for invalid use cases 
    (double free, freeing null pointer, freeing invalid pointer, freeing pointer that is not at the beginning of a chunk)


Test File: mymalloc_myfree_tests.c

void test_allocate_memory:
    -Allocate a valid size chunk of memory
    -Check that the returned pointer is not null

void test_allocate_multiple_chunks:
    -Allocate three chunks of memory whose sizes are non-multiples of 8
    -With alignment, header size, payload size all three chunks should be allocated and fit in the heap
    -Check all three returned pointers are not null

void test_allocate_too_much_memory:
    -Attempt to allocate one large chunk of memory that is greater than memsize
    -Check that the returned pointer is null meaning the memory request was denied

void test_allocate_too_much_memory_2:
    -Attempt to allocate three chunks of memory whose sizes are non-multiples of 8
    -With alignment, header size, payload size the first two chunks should be allocated and fit in the heap
    -The third chunk should not be allocated since its alignment, header size, payload size make it too big for the remaining portion of the heap
    -Check the returned pointers for the first two chunks are not null
    -Check the returned pointer for the third chunk is null

void test_allocate_zero_negative_bytes:
    -Attempt to allocate a chunk of size 0
    -Attempt to allocate a chunk of negative size
    -Check both returned pointers are null since requests of zero or negative bytes should not be processed

void test_myfree:
    -Using myfree to free memory allocated by mymalloc
    -Should free memory sucessfully

void test_coalesce:
    -Allocate three chunks whose sizes make up the whole heap
    -Free two adjacent chunks
    -Allocate a fourth chunk whose size is the combined size of the two freed chunks
    -The two freed adjacent chunks should coalesce allowing the fourth chunk to be allocated successfully
    -If the fourth chunk was allocated successfully, coalescing of the freed adjacent chunks worked. 

void test_myfree_errors:
    -Use switch statement to test various cases of when myfree should print an error
    -test_my_free_errors takes an argument "case_num" which represents the case to execute in the switch statement
    -Cases include freeing an invalid pointer, double free, freeing a null pointer, and freeing a pointer that is not at the beginning of a chunk
    -Each case should result in a printed error message "Inappropriate pointer"

    
Tests 4 and 5 in memgrind.c

test4:
    -Created a linked list
    -Used mymalloc to create new nodes 
    -Each node is a struct with fields char data and node *next
    -Created multiple nodes using mymalloc and then freed using myfree

test5:
    -Created a binary search tree
    -Used mymalloc to create multiple treenodes and insert them into a binary search tree
    -Each treenode is a struct with fields char data, TreeNode *left, TreeNode *right
    -Created a binary search tree and then freed the treenodes


